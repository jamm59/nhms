generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  // This is the user schema.
  forename               String                   @db.VarChar(16)
  surname                String?                  @db.VarChar(32)
  dob                    DateTime?                @db.Date
  email                  String                   @unique @db.VarChar(255)
  password               String                   @db.VarChar(32)
  gender                 String?                  @db.Char(1)
  userID                 String                   @id @unique @db.Char(32)
  isAdmin                Int?                     @default(0)
  // These are one to one relationships.
  Preferences            Preference?
  // These are one to many relationships.
  Logs                   Log[]
  Collections            Collection[]
  // These are many to many relationships, represented via junction tables.
  UserToChronicCondition UserToChronicCondition[]
  UserToAllergy          UserToAllergy[]
}

model Allergy {
  // These are the list of allergies. 
  // Many users may have many allergies.
  allergyID         String          @id @unique @db.Char(32)
  allergyType       String          @db.VarChar(45)
  alternativeChoice String          @ignore @db.VarChar(45)
  UserToAllergy     UserToAllergy[]
}

model UserToAllergy {
  // This acts as a junction table from the user to the allergy.
  userID    String
  user      User    @relation(fields: [userID], references: [userID])
  allergyID String
  allergy   Allergy @relation(fields: [allergyID], references: [allergyID])

  // This acts as a compound ID.
  @@id([userID, allergyID])
}

model ChronicCondition {
  // This is the list of chronic conditions. 
  // Many users may have many chronic conditions.
  chronicID              String                   @id @unique @db.Char(32)
  conditionType          String                   @default("IBS") @db.VarChar(45)
  UserToChronicCondition UserToChronicCondition[]
}

model UserToChronicCondition {
  // This acts as a junction table from the user to the chronic condition.
  userID           String
  user             User             @relation(fields: [userID], references: [userID])
  chronicID        String
  chronicCondition ChronicCondition @relation(fields: [chronicID], references: [chronicID])

  // This acts as a compound ID.
  @@id([userID, chronicID])
}

model Food {
  // This is the list of foods that are kept in the database. 
  foodID        String   @id @unique @db.Char(32)
  foodName      String   @unique @db.VarChar(45)
  isDrink       Boolean
  protein       Int
  fat           Int
  carbohydrates Int
  vitamins      Int
  calcium       Int
  iron          Int
  potassium     Int
  FoodLog       FoodLog?
}

model Preference {
  // There is a one-to-one mapping between the user and the preferences, 
  // Each User has one Preference.
  preferenceID     String  @id @unique @db.Char(32)
  fontSize         Int     @default(20)
  boldText         Boolean @default(false)
  highContrastMode Boolean @default(false)
  descriptiveLinks Boolean @default(true)
  darkMode         Boolean @default(false)

  user_userID String @unique @db.Char(32)
  user        User   @relation(fields: [user_userID], references: [userID], onDelete: Cascade, onUpdate: Cascade)
}

model Symptom {
  // This is where all the symptoms are kept.
  symptomID              String                   @id @unique @db.VarChar
  symptomName            String?                  @db.VarChar
  SymptomLog             SymptomLog?
  MenstrualLogToSymptoms MenstrualLogToSymptoms[]
}

model Log {
  // This is where all the log entries are.
  logID     String   @id @db.VarChar(32)
  timestamp DateTime @db.Timestamp()
  logType   String   @db.VarChar(12)

  // One to many relation between a user and their log.
  user         User?         @relation(fields: [user_UserID], references: [userID], onDelete: Cascade, onUpdate: Cascade)
  user_UserID  String?       @db.Char(32)
  // One to one relationship between a logID and different log elements.
  HealthLog    HealthLog?
  MoodLog      MoodLog?
  FoodLog      FoodLog?
  WaterLog     WaterLog?
  MenstrualLog MenstrualLog?
  SymptomLog   SymptomLog?
}

model HealthLog {
  // This is where the health log entries can be found. These will have a tag of health
  // in the logtype.
  healthID           String @unique @db.Char(32)
  height             Int?
  weight             Int?
  bloodPressure      Int?
  bloodGlucoselevels Int?

  //This maps the relation to the logID. 
  log_logID String @unique @db.VarChar(32)
  LogID     Log    @relation(fields: [log_logID], references: [logID], onDelete: Cascade, onUpdate: Cascade)

  //Creates a compound ID.
  @@id([healthID, log_logID])
}

model MoodLog {
  // This is where the mood log entries can be found. These will have a tag of mood
  // in the logtype.
  moodID     String @id @unique @db.Char(32)
  moodStatus String

  //This maps the relation to the logID. 
  log_logID String @unique @db.VarChar(32)
  LogID     Log    @relation(fields: [log_logID], references: [logID], onDelete: Cascade, onUpdate: Cascade)
}

model FoodLog {
  // This is where the food log entries can be found. These will have a tag of food
  // in the logtype.
  foodQuantity Int

  //This maps the relation to the logID + the food ID.
  log_logID   String @unique @db.VarChar(32)
  LogID       Log    @relation(fields: [log_logID], references: [logID], onDelete: Cascade, onUpdate: Cascade)
  food_foodID String @unique @db.VarChar(32)
  foodID      Food   @relation(fields: [food_foodID], references: [foodID], onDelete: Cascade, onUpdate: Cascade)

  //Creates a compound ID.
  @@id([log_logID, food_foodID])
}

model SymptomLog {
  // These map any symptoms to a log.
  intensity Int

  //This maps the relation to the logID + the symptom ID.
  log_logID         String  @unique @db.VarChar(32)
  LogID             Log     @relation(fields: [log_logID], references: [logID], onDelete: Cascade, onUpdate: Cascade)
  symptom_symptomID String  @unique @db.VarChar(32)
  symptom           Symptom @relation(fields: [symptom_symptomID], references: [symptomID], onDelete: Cascade, onUpdate: Cascade)

  //Creates a compound ID.
  @@id([log_logID, symptom_symptomID])
}

model WaterLog {
  // This is where the water log entries can be found. These will have a tag of water
  // in the logtype.
  waterAmount Int

  //This maps the relation to the logID. 
  log_logID String @unique @db.VarChar(32)
  LogID     Log    @relation(fields: [log_logID], references: [logID], onDelete: Cascade, onUpdate: Cascade)
}

model MenstrualLog {
  // This is where the menstrual log entries can be found. These will have a tag of menstrual
  // in the logtype.
  lastDate       DateTime @db.Timestamp()
  cycleLength    Int
  periodDuration Int

  //This maps the relation to the logID. 
  log_logID String @unique @db.VarChar(32)
  LogID     Log    @relation(fields: [log_logID], references: [logID], onDelete: Cascade, onUpdate: Cascade)

  MenstrualLogToSymptoms MenstrualLogToSymptoms[]
}

model MenstrualLogToSymptoms {
  //Many symptoms can be mapped to many menstrual logs. This acts as a junction table.
  menstruallogID    String
  menstrualLogEntry MenstrualLog @relation(fields: [menstruallogID], references: [log_logID])
  symptomID         String
  symptom           Symptom      @relation(fields: [symptomID], references: [symptomID])

  @@id([menstruallogID, symptomID])
}

model Collection {
  //Each collection has one user. There is a one to many relationship between the user and the collections.
  collectionID   String @id @unique @db.Char(32)
  collectionName String @default("My Collection") @db.VarChar(45)

  userUserID           String?                @db.Char(32)
  User                 User?                  @relation(fields: [userUserID], references: [userID])
  CollectionsToRecipes CollectionsToRecipes[]
}

model Recipe {
  recipeID             String                 @id @unique @db.Char(32)
  recipeName           String                 @db.VarChar(45)
  recipeInstructions   String                 @db.VarChar(100)
  cookTime             Int
  prepTime             Int
  recipeIngredients    String                 @db.VarChar(200)
  CollectionsToRecipes CollectionsToRecipes[]
}

model CollectionsToRecipes {
  // There is a junction table between the recipes and collections, as it is a many to many relationship.

  collectionID  String
  newCollection Collection @relation(fields: [collectionID], references: [collectionID])
  recipeID      String
  recipe        Recipe     @relation(fields: [recipeID], references: [recipeID])

  @@id([collectionID, recipeID])
}
